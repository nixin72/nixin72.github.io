#+TITLE: A Comparison of Lisps
#+SETUPFILE: ../templates/html.org
#+INCLUDE: header.org
#+OPTIONS: toc:1

Like a lot of people, I was introduced to this weird language in university, Common Lisp, that
seemed so weird and out there that I wanted to know more about it. Even before being introduced to
it I was curious about programming languages, so I decided to dive in to Common Lisp and try to
learn a little bit more about why it. Fast-forward a few years and I'm a huge fan of Lisp. Clojure
is my go-to language, and I've contributed to the Racket and Emacs Lisp ecosystems and dabbled in
Common Lisp.

Now, not everyone has the time or patience or interest in learning all these languages and wants to
just pick one up, so I'm going to cover some of the aspects of each dialect of lisp and why you
might want to pick it, and why you might want to avoid it.

TL;DR: If you have no specific needs or want to build web applications, do yourself a favour and
learn Clojure. I have a [[file:clojure-design][whole other article]] about why Clojure is the /best/ designed programming
language I've ever touched. However, that doesn't mean it's always what you need or what you should
learn.

* Common Lisp
ANSI Common Lisp was standardized in 1994, and remains today as a first choice for many people for
rapidly building extensible and introspectable applications. Common Lisp is a seriously
multi-paradigm programming language that leans in whatever direction you chose to take it. It can be
procedural, object-oriented, functional, logical, whatever you really want it to be. It has many
different implementations that will all function the same for a beginner, but give flexibility to
more experienced devs who know what they need.

*** Would chose if...
- You need high-end performance
- Live debugging in-production applications is a must

*** Would avoid if...
- You want a small binary
- You want something more opioninated or modern

*** Cons
- Not a whole lot of packages
- Lack of opion in the language leads to tons of ways to do things
- Standard library can be inconsistent at times
- Community is small, scattered, and can be unwelcoming sometimes

*** Pros
- Very fast. Some benchmarks for the SBCL compiler show it as one of the fasted dynamic programming
  languages out there
- It's macro system is extremely flexible and easily allows you to do anything you want - even if it
  includes shooting yourself in the foot sometimes
- Lots of different implementations to chose from if you have specific needs
- Interactive development leads to quick development times
- Patching applications in production requires no down-time

* Scheme
Scheme is even older than Common Lisp, and has many more standardized versions - including ones much
more recent than Common Lisp. Scheme is typically more procedural or functional, but it can be
object-oriented or anything else as well. It's a very minimalistic language though, with a small
standard library that differs across standardizations and even implementations. Scheme is often used
in academics for programming language experimentation because it's such a simple language - simple
enough that implementing your own interpreted can be done in a weekend if you know what you're
doing. I like to think of Scheme as the C of lisps. It's minimalistic with a very small set of core
primitives, but it's been around for forever and is more pervasive than you'd think. In fact, if you're
running a unix machine, you probably already have GNU Guile installed on it somewhere.

*** Would chose if...
- You need something with a small footprint and C interop
- You want something that will run closer to the metal

*** Would avoid if...
- You want to build an application quickly
- You want something easy to distribute cross-platform

*** Cons
- Not a whole lot of packages
- Very small standard library means more depending on packages or building things yourself
- Lots of implementations can be confusing to beginners
- No standard build system
- Figuring out exactly what your implementation supports can be confusing
- Writing code that works across scheme implementations can be very difficult or impossible, even if
  they're following the same standard
- Community is small, and scattered, but is generally friendly

*** Pros
- Very easy to pick up since it's so minimal
- Tons of implementations that will let you build anything to run on any hardware
- Often very good FFI to call into C functions
- It's macro system is incredibly powerful, debatably more so than Common Lisp, but will also stop
  you from shooting yourself in the foot

* Clojure
Clojure is the new kid on the block in terms of lisps. It's first release was in 2009 and it is in
continued active development. Clojure is very functional compared to other lisps, and just in
general unless you're a Haskell or ML person. Clojure is a little unique among lisps in that it's
designed from the ground up to be a hosted language, meaning it takes advantage of other language's
ecosystems. Clojure has 3 official implementations that can compile for the JVM, JavaScript or the
.NET CLR. Clojure also has a handful of unofficial implementations to offer other benefits where
something specific is needed.

*** Would chose if...
- You're building web applications (front-end or backend), CLI tools, data analysis, etc
- You value functional programming over other paradigms
- You want a reliable general-purpose language

*** Would avoid if...
- You want to run close to the metal

*** Cons
- Slow startup time
- If you have an aversion to the JVM (Java knowledge is /not/ required for Clojure)

*** Pros
- Seamless interop with host language
- Access to host ecosystems grants Clojure millions of packages
- Immutable by default
- Mutation only permitted in thread-safe wrapper objects
- Compiles to JavaScript to run in a browser
- Large, very friendly, and helpful community
- Can use GraalVM to compile jar files to native binaries that don't require a JVM

* Racket
Racket is the natural evolution to Scheme. It first appeared in 1995, and it's core implementation
is still in active development. I like to think if Scheme is C, then Racket is C++. At their core,
most Scheme code is valid Racket code, but the inverse is definitely not true. Racket has a huge
standard library and many packages easily accessible through a package manager and build tool that
ships with Racket. Racket, like Scheme, leans more procedural and functional, but supports
object-oriented and any other paradigm under the sun. Racket calls itself a language-oriented
programming language since it's got tools built in for very easily implementing new programming
languages that run on Racket's runtime.

*** Would chose if...
- You want to experiment with language design or build CLI tools
- You want to embed it into another application

*** Would avoid if...
- You want to develop web applications
- You want/need a REPL

*** Cons
- Dealing with types other than linked lists can be annoying
- Verbose function names and syntax in general
- Immutable data structure API is weak and mutable API is frustrating verbose
- Functions all have type prefix for their names ~vector-ref~, ~hash-ref~, ~string-ref~, no just ~ref~

*** Pros
- Lots of DSLs running on the same platform to give you the best language to approach a task
- Very friendly and helpful community

* Emacs Lisp
Emacs Lisp is the Lisp you'll want if you're using Emacs, there's not much more to it. Created in
1984 by Richard Stallman, it's the language you'll be using if you're hacking away at the Emacs text
editor. If you get serious about any Lisp, at some point you're likely to try out Emacs, at which
point you'll eventually give ELisp a spin.

*** Would chose if...
- You need it to run in Emacs.
- You need access to something that only runs in Emacs (ex. org-mode)

*** Would avoid if...
- You need it to run outside Emacs

*** Cons
- Everything is public and global. If you don't want people touching an internal function or
  definition, you follow a naming convention to tell people not to touch it
 - The language is wildly inconsistent and function names can be very unintuitive, and documentation
   is required
- Debugging ELisp is not pleasant
- Single threaded

*** Pros
- You can make Emacs do whatever you want. It can be a pain to work with, but it will make Emacs yours

* Conclusion
Overall, as much as I told myself before starting this to be unbiased, I'm very partial to Clojure.
The only real cons I see to it are the JVM if you have an aversion to it, and the slow startup
time - both of which are easily mitigated or eliminated with other implementations or compiling with
GraalVM. However, it's still not for everyone.
