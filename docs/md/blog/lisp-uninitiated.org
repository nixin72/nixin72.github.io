#+TITLE: Lisp for the uninitiated
#+SETUPFILE: ../templates/html.org
#+INCLUDE: header.org

* About Lisp

#+begin_quote
Study C to see the power of a computer without the constraints of a language. Study Lisp to see the
power of a language without the constraints of a computer. Even if you never use either language 
professionally, they will both fundamentally change how you code for the better.
#+end_quote

This is one of my favourite quotes about Lisp, and even though it's from a random reddit user, I 
believe it holds true. People often talk about Lisp as though it's some infinitely powerful 
language and mysterious and blah blah blah. While it's true that Lisp is very powerful, it's not 
mysterious or complicated how it works.

This article is targeted towards people who maybe took a class in Lisp and really hated it, or had 
a friend show it to them but poorly explained it and were left confused, wonder why the hell you'd 
use something so esoteric or archaic. If you've never used Lisp before, but are maybe curious, 
check out my other post about [learning Lisp](lisp-for-beginners.html).

To start, I want to clarify that Lisp itself isn't really a programming language. Lisp is a /family/
of programming languages. Just like the "C family" covers C, C++, C#, Java, JS, Go, etc., the Lisp
family covers Common Lisp, Clojure, Emacs Lisp, Hy, Scheme, Racket, etc. When people say "Lisp",
they're usually either referring to Common Lisp, but there's more to the world of Lisp than CL.

* Lisp Syntax

We all know and recognize C-like languages, they've got their curly braces, maybe semi-colons, if
statements, for and while loops, etc. But what does a Lisp look like if not that? Lisp uses a type
of syntax called s-expressions, and they look like this:

#+begin_src common-lisp
(defun my-adder (number-1 number-2)
  (print number-1)
  (print number-2)
  (print (+ number-1 number-2)))
#+end_src

This code is pretty simple to figure out what's going on: it defines a function (with ~defun~) named 
~my-adder~ that accepts two parameters. The body of the function simply prints those two parameters, 
and then prints their sum.

There's nothing particularly complicated about this, but there is a lot to unpack here if you're
unfamiliar with the syntax. The first thing you'll probably notice is that there's a lot of
parenthesis everywhere. ~defun~ is inside parenthesis, the ~print~ function has parenthesis /before/ the
function name, which is kind of weird, and even the ~+~ has parenthesis around it. There's a very good
reason for this: in Lisp, almost everything is a function. Anything that isn't a function, like
~defun~, uses the same syntax as function calls though. ~+~ is a function that adds two number. ~print~ is
a function that writes it's argument to stdout.

* Prefix notation

This is pretty unfamiliar to most people, but I promose it has a very good reason for being like 
this! Think about the following code in C/C++:
#+begin_src cpp
int * a1, a2;
#+end_src

What does this code do? We know that it declared 2 variables ~a1~ and ~a2~, that's not too complicated.
But we also have this ~*~ in here that's declaring them as pointers. Or is it? Is it declaring both of
them as pointers or just ~a1~? To a reader, this code is *ambiguous* unless you know the order of
precedence of operations in C++. What you might /think/ this code does is creates two pointers to
integers, since the ~*~ is a part of the type, and so it should apply to both ~a1~ and ~a2~. However in
practice, only ~a1~ is a pointer and ~a2~ is just an integer.

In Lisp, we don't have this problem with operator precedence. The way that we do math in Lisp is like so:
#+begin_src lisp
(print (+ 3 (* 2 (+ 4 5))))
#+end_src

And this means that we're first adding ~4 + 5~, then multiplying ~2 * 9~, then adding ~3 + 18~ to get ~21~.
There's no order of orperations in Lisp, so everything is entirely unambiguous. This is one small,
but undeniable advantage to writing code using s-expressions. But this is only a small advantage
compared, the real gain comes with how we represent *data* in Lisp.

* Representing data

The central data structure in Lisp is the *singly-linked lists*. If you think List and Lisp are too
close sounding, that's because Lisp used to be an ackronym meaning LISt Processor. The way you
create a single linked list is like this:

#+begin_src lisp
(defvar my-list (list 1 2 3 4 5))
(print my-list) ; (1 2 3 4 5)
#+end_src

Since all of the values in that list are constant, we could equally declare that list as so:
#+begin_src lisp
(defvar my-list '(1 2 3 4 5))
#+end_src

What that quote means in Lisp is that the expression after it is not to be evaluated and everything
should be treated literaly. This means to create a nested list I could do:
#+begin_src lisp
(print '((1 2 3) (:a :b :c)))
#+end_src

And doing this is much simpler than writing out
#+begin_src lisp
(print (list (list 1 2 3) (list :a :b :c)))
#+end_src

Now, notice how the syntax for creating lists is the same as the syntax for everything else. If we do
#+begin_src lisp
(print (let ((x 10) (y 20))
         (+ x y)))
#+end_src

This code will declare variables ~x~ and ~y~, calculate their sum, and then print them. But if we do
#+begin_src lisp
(print '(let ((x 10) (y 20))
          (+ x y)))
#+end_src

This code is now entirely different. It won't print the sum of the two numbers, this is now a nested
list. The first element of the list is the symbol ~let~ followed by another nested list, followed by
another list whose first element is ~+~, then ~x~, then ~y~. This list would kind of be equivalent to the
following in JavaScript
#+begin_src java
console.log([Symbol("let"), [[Symbol("x"), 10], [Symbol("y"), 20]],
             [Symbol("+"), Symbol("x"), Symbol("y")]])
#+end_src

But in Lisp, the syntax for creating lists is the exact same syntax as that for writing code. This
is a feature of a small number of programming languages that we call homoiconicity. This becomes
very important in understanding Lisp's *macros.*

* Macros

In C and C++ you can define what are called macros. Macros in C/C++ are pieces of code that when
called, will replace the call to the macro with the text that it's declared as *at compile time*. For
example:
#+begin_src cpp
#define print(a) std::cout << a << std::endl

print("hello");
#+end_src

What this would do is when you compile this code, a *textual-substituion* takes place. The code 
~print("hello")~ would actually get replaced by the code ~std::cout << a << std::endl~. This is a pretty
convenient feature - we can use it for writing very small "functions" and have them get replaced by
their definitions at compile time to eliminate the overhead of calling a function and creating a 
new stack frame.

In Lisp though, we have something even better. In Lisp, macros are actual functions that evaluate
at compile time. That sounds kinda complicated, so here's an example:
#+begin_src lisp
(defmacro infix->prefix (func-call)
  (list (second func-call) (first func-call) (third func-call)))
#+end_src

What this does is it defines a macro called ~infix->prefix~, and it takes a function "form" as a
parameter. The function ~first~ will extract the first element of a list, ~second~ will extract the second,
and ~third~ will predictably extract the 3rd. It then takes those elements and returns a new list,
with the elements in a different order so the second is now the first.

If you we're to call this like so:
#+begin_src lisp
(print (infix->prefix (1 + 2)))
#+end_src

Then what this does is at compile time, it'll transform the list ~(1 + 2)~ into ~(+ 1 2)~, so that when 
it comes time for the program to execute, it'll evaluate as ~(+ 1 2)~ and print it at run-time.

While this example might seem somewhat trivial and not that much more powerful that C/C++ macros, 
here's a quote that describes the difference between the two quite well:
#+begin_quote
In most programming languages, syntax is complex. Macros have to take apart program syntax, analyze 
it, and reassemble it. They do not have access to the program's parser, so they have to depend on 
heuristics and best-guesses. Sometimes their cut-rate analysis is wrong, and then they break.

But Lisp is different. Lisp macros do have access to the parser, and it is a really simple parser. 
A Lisp macro is not handed a string, but a pre-parsed piece of source code in the form of a list, 
because the source of a Lisp program is not a string; it is a list. And Lisp programs are really 
good at taking apart lists and putting them back together. They do this reliably, every day."

- Ben Tilly
#+end_quote

Since Lisp is able to do much more complicated preprocessing like this with macros, the 
possibilities are endless. For example, you can define HTML-like syntax in Lisp for building a web 
framework pretty trivially:
#+begin_src lisp
(html
  (head (title "hello world"))
  (body ((color "green"))
    (p "This is some green text")))
#+end_src

We can also define macros to create new control-flow structures. For example, in Lisp ~if~ can be a
little annoying sometimes because it looks like ~(if <cond> <then-expr> <else-expr>)~ - this means
that your cases can only contain one expression each. But what if you don't want an ~else~, and you
want several lines in your ~then~ case? Well, building a macro for this is really easy.
#+begin_src lisp
(defmacro when (condition &rest body)
  `(if ,condition (progn ,@body) nil))
#+end_src

We can then use this like so:
#+begin_src lisp
(when (= x y)
  (print x)
  (print y)
  (print (+ x y)))
#+end_src

without worrying about the fact that you have multiple expressions in your body.

Macros are a very powerful abstraction tool that can allow you to represent repetitive complex
things in your code in a much more concise way. Like functions, they're just another building block
that Lisps give you access to so that you can build complex software as cleanly as possible.

If these regular macros don't sound very interesting to you, many lisp dialects such as Common Lisp
and Racket allow you to push it a step further and completly re-write the syntax of the language
using what they call *reader macros*.

* Reader macros
While normal macros are able to transform your code into a new form, *reader macros* are able to
transform code that previously wasn't in valid Lisp syntax into valid syntax. This means that you
can not  only transform the code at compile time, but you can create your own syntax for an entirely
new language.

Remember earlier we talked about how that quote would make everything after it get interpreted 
literally? Well ~quote~ is actually the name of a macro that does that, and the ~'~ that we use is a 
*reader macro* that transforms it into the `quote` macro form. We can define the ~'~ reader macro like 
this:

#+begin_src lisp
(defun single-quote-reader (stream char)
   (declare (ignore char))
   (list (quote quote) (read stream t nil t)))

(set-macro-character #\' #'single-quote-reader)
#+end_src

This will tell the Lisp compiler "when you see the ~'~ character, take the s-expression following it, 
and give it to the function ~single-quote-reader~". This allows us to extend the syntax of our 
language pretty simply by telling the compiler what to do when it sees a quote. Now remember how we 
had that HTML-like code, except it was still really just Lisp syntax? Well using reader macros we 
can change that and make something like this if we wanted:
#+begin_src html
<html>
  <head>
    <title>Hello world</title>
  </head>
  <body style="color: green">
    <p>This is some green text</p>
  </body>
</html>
#+end_src

This can be perfectly valid Common Lisp or Racket code. It would get transformed by a complicated
set of reader macros into the s-expression version above, which would then get translated into some
more complicated generation code.

You can do some incredibly cool, and complicated stuff with reader macros such as:
- [[https://lisper.in/reader-macros][Allow JSON syntax in Lisp]]
- [[https://stackoverflow.com/questions/267862/what-makes-lisp-macros-so-special#answer-4621882][Write Python-like list comprehension]]
- [[https://github.com/y2q-actionman/with-c-syntax/][Embed C syntax directly into Lisp code]]

* Dialects
As mentioned at the beginning of the article, there are several dialects of Lisp. Some of the most common
ones are Clojure, Common Lisp, Scheme, Racket, and Emacs Lisp. If you're thinking of learning one of
them, [[file:which-lisp.org][maybe this can help you chose]] a dialect to learn.

* Conclusion
I hope you walk away from reading this understanding why Lisp is interesting. I know that it takes a
while to get used to it, and many people that learn it have a gut reaction to hate it, but
understanding the method behind the madness will make it easier to grasp.

If you're interested in taking some of the first steps to learning Lisp, check out some of the
resources below:

** Clojure
- [[https://www.braveclojure.com/clojure-for-the-brave-and-true/][Clojure for the Brave and True]]
- [[https://learnxinyminutes.com/docs/clojure/][Learn Clojure in Y minutes]]
- [[https://clojure.org/api/cheatsheet][Clojure Cheatsheet]]

** Common Lisp
- [[https://gigamonkeys.com/book/][Practical Common Lisp (jump to Chapter 3)]]
- [[https://learnxinyminutes.com/docs/common-lisp/][Learn Common Lisp in Y minutes]]

** Racket
- [[https://docs.racket-lang.org/quick/][An introduction Racket with Pictures]]
- [[https://docs.racket-lang.org/more/][Systems Programming with Racket ]]


And if you're curious about the real-world applications of Lisp, or just want some more
encouragement to learn it, lisp sees more use than you might think:
- [[https://lisp-lang.org/][Grammarly uses Common Lisp]] for natural language processing
- [[https://lisp-lang.org/][Google's flight search engine uses Common Lisp]]
- [[https://lisp-lang.org/success/][Dozens of other companies]] use Common Lisp to much success
- [[https://boards.greenhouse.io/circleci][CircleCI]] uses [[https://circleci.com/blog/clojure-microservices-for-js-devs-pt-1/][Clojure extensively]] throughout it's [[https://circleci.com/blog/deploying-clojure-applications-to-google-cloud/][full stack]]
- Clojure is used by [[https://clojure.org/community/companieshundreds][hundreds of other companies]], like Apple, Facebook, Walmart, and more
- Clojure developers are [[https://insights.stackoverflow.com/survey/2018/#work-_-salary-and-experience-by-language][consistently]] some [[https://insights.stackoverflow.com/survey/2019#technology-_-what-languages-are-associated-with-the-highest-salaries-worldwide][the best paid]] in [[https://insights.stackoverflow.com/survey/2021#section-top-paying-technologies-top-paying-technologies][the world]]
- [[https://www.gameenginebook.com/resources/SINFO.pdf][Naughty Dog used Racket for PS3 and PS4 games]]
