#+TITLE: Interactive Clojure
#+SETUPFILE: ../templates/html.org
#+INCLUDE: header.org
#+OPTIONS: toc:nil \n:t

#+INCLUDE: ../templates/klipse-start.org

** Clojure from 100ft
Clojure is a high-level, dynamically typed, functional programming language. It's designed from the
ground up to be a hosted language, taking advantage of existing platforms and ecosystems. As such,
it can take advantage of mature and battle-tested environments such as the JVM, JavaScript and
dotnet's CLR. Clojure has nearly seamless interop with it's host, giving the language access to
countlesshigh-quality libraries to do anything you want. Clojure also boasts tens of thousands of
it's own libraries for writing clean and idiomatic code.

** From 10ft
Clojure is not a C-like language, meaning it's syntax might be a little unfamiliar. Instead of the
curly-braces and semi-colons, Clojure code is written more similarly to JSON - except with a lot
more types. For example, a function definition looks like:
#+ATTR_HTML: :class lang-clj
#+BEGIN_code
(defn my-function []
    (print {:a 10 :b 20}))
(my-function)
#+END_code

Okay, it looks pretty different from JSON. But, there are similarities! The ~()~ in Clojure are the
beginning and start of a list, ~[]~ is a vector, and ~{}~ is a hashmap. So in our code here, we have a
list with the symbol ~defn~, the symbol ~my-function~, an empty vector ~[]~, and then anothe nested list.

This is really weird at first, and is likely pretty foreign. But, there's good reason for this
weirdness. For example, Clojure has no such thing as operator precedence. Take a look at this code:
#+begin_src cpp
a + b * c
#+end_src
We all know what happens here. We multiply ~b~ and ~c~, then add ~a~. This order of operations has been
drilled into our heads since we were kids. But /intuitively/, this code should be add ~a~ and ~b~, then
multiply by ~c~. Code is filled with these ambiguities. Let's look at something a bit more unclear.
#+begin_src cpp -n
void Stack_Push(Stack s, int item) {
    s->items[++s->sp] = item;
    s->count++;
}
#+end_src
What are we incrementing here? Are we incrementing the value of ~s~ or ~s->sp~? You need to know the
specifics of the order of precedence here, which gets even more confusing when looking at C++'s
precedence table.
#+CAPTION: C++ precedence table
[[https://media.discordapp.net/attachments/825458741356396545/893229588711350292/2021-09-30-161522_629x144_scrot.png]]
We need to know not only that they have the same level of precedence, but also that it's
left-to-right associative /in this instance/. Some operators in C++ have right-to-left associativity.
That's a lot of rules to know. This is not an issue that exists in Clojure.

There as many more even better reasons for Clojure's different syntax that we'll explore later. I
just wanted to convey that this difference is not without good reason!

** Clojure up close

Now that we have a very basic idea of what Clojure looks like, lets write some code in it.
#+BEGIN_EXPORT html
<code class="lang-clj">
  (def x (+ 10 20))
  (println x)
</code>
#+END_EXPORT
As mentioned before, clojure has no syntactic ambiguity, so everything is written in function form.
~10 + 20~ becomes ~(+ 10 20)~.

One of Clojure's strongest selling points it it's collections, and the endless number of functions
for operating on those collections. Clojure has syntactic support for linked-lists, vectors,
hashmaps, and sets, and it also has easy to reach stacks, queue and trees with tons of functions to
operate on all of them.
#+ATTR_HTML: :class lang-clj
#+BEGIN_SRC clojure
(def linked-list (list 1 2 3 4))
(def my-vector [1 2 3 4])
(def my-hash {:a 1 :b 2})
(def my-set #{1 2 3 4})
#+END_SRC

#+BEGIN_EXPORT html
<code class="lang-clj">
  (def linked-list (list 1 2 3 4))
  (def vector [1 2 3 4])
  (def hash-map {:a 1 :b 2})
  (def set #{1 2 3 4})
  (def queue (conj cljs.core.PersistentQueue.EMPTY 1 2 3 4))
</code>
#+END_EXPORT

Lets say we want to transform every item in a vector. We can easily do this with the ~map~ function.
#+ATTR_HTML: :class lang-clj
#+BEGIN_code
(map inc [1 2 3 4])
#+END_code

Or lets say we want to find all the even numbers, sort them, and remove the duplicates - we can
still easily do this by creating a pipeline of functions:
#+BEGIN_EXPORT html
<code class="-clj">
(->> [1 2 3 4]
     (filter even?)
     (distinct)
     (sort))
</code>
#+END_EXPORT

So we know what a couple built-in functions are - but how do we define our own? We can create
functions using the ~defn~ construct.

#+INCLUDE: ../templates/klipse-end.org


What Clojure needs:
- A better home page highlighting Clojure's strengths and some code
- interactive learning environment on the website
- An easy way to install all the tooling - something bundled like portacle that installs all the
  missing components
- Type-based auto-completiong (LSP)
- discover Clojure libaries and tools
