#+TITLE: My Ideal Lisp
#+SETUPFILE: ../templates/html.org
#+INCLUDE: header.org

I recently saw a post on r/lisp asking people if they could design their own lisp from scratch, what
would they do? There was lots of interesting ideas being discussed and thrown around, and I started
thinking about what my ideal lisp might look like. So here's what I think I might like...

First of all, I'd use Clojure as a base, not Common Lisp. I appreciate the innovation that Clojure
has made to the lisp world in the use of other data structures, immutability, good concurency
primitives, and other great things. However, there's always room for improvement.

** Startup time

Clojure startup time is very slow. Of course, everyone will tell you that this isn't an issue most
of the time because Clojure is designed for long-running processes like servers and it never hits
you in development time cause of the REPL. Both of these are mostly true, but there's still some
issues here.

The startup time makes Clojure entirely unusable for building something like a short lived command
line utility. While this isn't a use case that Clojure optimizes for, as a general-purpose
programming language, it definitely shouldn't be a bad choice for that, but I'd argue most JVM
languages are. Now, there's lot of ways that you can get around this. You can use a different
runtime like ClojureScript to get nodejs like startup times, or babashka as an interpreted Clojure
for even lower startup. You can also use GraalVM Native-Image to produce native executables from
your project's jar file. However, all of these alternatives have drawbacks to them. ClojureScript
requires having node installed on a system and shifts you to a different ecosystem. Babashka
requires you to have bb installed on the system and limits library use. GraalVM limits library use
and disallows you from using eval.

Having something with a fast startup time without these compromises would be very nice. Maybe
something image-based like Common Lisp, written to target LLVM so that you have native performance
with the compiler bundled into the runtime to allow things like ~eval~ to work. This way the only real
compromise is on binary size, which is a pretty easy decision to make on most systems. Maybe you can
also produce different kinds of executables - one that dynamically links to the compiler on the
user's system as a library, or maybe another that disallows eval in the code entirely? Potentially
Interesting options to explore.

*Existing work:* graalvm, babashka, clojurescript

** Data Structures

Clojure has fantastic data structures, but there are some things that I find are missing from it
sometimes. For example, I wish that Clojure had sorted maps built-in. This isn't a huge deal because
sorted maps and sets exist via libraries, but it would be nice to have syntactic support for them.
Perhaps ~#[]~ could be a sorted map? It doesn't make a huge amount of sense as an operator, but hey,
Clojure doesn't use ~#[]~ for anything. Or maybe ~#[]~ can be a syntax for queue and we can have ~#smap
{}~ and ~#sset {}~ for sorted maps and sorted sets. This would probably be a little better actually.
Either way, with queues as an important data structure for concurrency, it would be good to have
first-class syntax for it, and with sorted maps and sets, I find myself wanting them a decent
amount.

Clojure's handling of immutable data structures is fantastic, but when dealing with deeply nested
data it can get tedious. Something like Spectre or lenses built-in could be awesome for
querying and transforming deeply nested structures. Specter also has the advantage of not turning
the data structure into a sequence, which is pretty nice. The sequence abstraction is useful, but
some of the time it can lead to unexpected results when you forget you're dealing with a ~seq~ and not
a ~vec~. For example, ~conj~ on a seq will add something to the beginning of the sequence, not the end
as you'd expect with a vector.

*Existing work:* org.flatland/ordered, specter

** Error Handling

Try/catches aren't fantastic, but they /do/ have significant advantages over things like maybe types
or returning error values like Haskell or Go. Try/catches allow errors to be propogated up a stack
much more easily, and don't pollute your code with error checks, and I think this makes them much
nicer to work with. They could be better though, which is why try/catches are augmented to also have
condition/restart like behaviour to be able to do things like pause execution, jump to a restart
handler, get a value to continue with, and then resume execution. However, I would want existing
Clojure libraries to work too, so this would probably end up looking like...

#+begin_src clojure
(defn some-function [x]
  (if (string? x)
    (throw (Exception1.))
    (throw-back (Execption2.))))

(try
  (some-function 1)
  (catch Exception1 _ 10)
  (handle Exception2 _ 20))
#+end_src

Here, ~throw~ and ~catch~ work exactly as you would expect in Clojure. An exception gets thrown, you go
back up the call stack until a ~try~ is encountered, you run the ~catch~ block associated with the
exception type thrown. The ~throw-back~ and ~handle~ are a little different. Like ~catch~, it works it's
way back up the call stack until a ~try~ with an associated ~handle~ block is found, but then it's a
little different. Then, it'll run the ~handle~ block, and the value returned gets sent back up to
~throw-back~ call and the ~throw-back~ is substituted with the value returned from the ~handle~. This is
similar to the condition/restart system in Common Lisp and algebraic effects.

It's just a nice little extra thing to add on top of the normal exception handling to make it a
little more flexible and powerful.

*Exisiting work:* Farolero

** Stack Traces

Clojure stack traces need to be improved. They're one of the things that beginners complain about
the most. There are existing tools in the Clojure ecosystem to improve stack traces, such as [[https://ioavisopretty.readthedocs.io/en/stable/][pretty]],
but these are mostly known by people who already have a decent amount of exposure to Clojure - so
the ones who will already know the ecosystem.

*Existing work:* Pretty

** Gradual Typing

I used to hate static typing because I thought Java is what static typing was. A type is a name, and
anything that looks the same, but has a different name, is a different type. I thought they were
restrictive, made the program less flexible, and were overall kind of a pain. TypeScript made me
think otherwise. I think structural static or gradual typing is a joy to work with. They feel just
as flexible as dynamically typed languages, but with the added safety of static typing.

I would love to see a type system that's gradually typed that has a separation between dynamic and
statically typed code such that, when calling statically typed code from dynamic code, you get
type errors thrown at runtime (a la spec), and static code called from static code gets full static
typing errors. This might look something like

#+BEGIN_SRC clojure
(defn sum [^Number a ^Number b]
  (+ a b))

(sum 1 "2") ; throws runtime error here

(defn some-fun [^String a ^String b]
  (+ a b)) ;; Compile time error thrown here

(some-fun "1" "2") ; no run time error thrown
#+END_SRC

I think that something like this could be very nice. It's a very flexible system that provides a
decent amount of safety, you can use this as much or as little as you like, and it provides some
safety at the boundaries between static and dynamic types.

I also think that when it comes to object types, a "minimum requirements" approach should be taken.
Extra information provided in a map is never a bad thing, so why throw a type error?

I think types could look nice somewhat like this...
#+begin_src clojure
(type T {:x Integer
         :y Number})

(type F (-> Number Number T))

(defn ^F func [x y]
  {:x x :y y})

(: map (-> (-> 'a 'b) & (vec 'a) (vec 'b)))
(defn map [f collection]
  (if (empty? collection) collection
      (conj (map f collection)
            (f (first collection)))))
#+end_src

Where quoted types are perhaps treated as generics? This is vaguely inspired by OCaml and Typed
Racket.

*Existing work:* TypedClojure

** Summary

There's a lot of things that I think Clojure could benefit from, but for almost everything I think
is missing, there's an existing solution out there. Most of these solutions have some drawbacks
though, and could be improved upon. Whether it's visibility, ease of use, or just that there's
compromises you aren't really willing to make, there are drawbacks that aren't particularly easy to
solve unfortunately.
